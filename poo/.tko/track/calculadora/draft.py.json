{
    "patches": [
        {
            "label": "2025-10-06_02-40-37",
            "content": "@@ -185,16 +185,10 @@\n elf)\n- -%3E str\n :\n+%0A\n %0A   \n@@ -230,16 +230,17 @@\n ay:.2f%7D,\n+ \n  battery\n@@ -456,16 +456,8 @@\n elf)\n- -%3E bool\n :%0A  \n@@ -689,167 +689,8 @@\n    %0A\n-        self.battery -= 1%0A        self.display = a + b%0A%0A    def div(self, a: float, b: float):%0A        if not self._has_battery():%0A            return%0A        %0A\n     \n@@ -748,24 +748,26 @@\n  zero%22)%0A\n+%0A%0A\n         \n else:%0A  \n@@ -758,33 +758,42 @@\n         \n+s\n el\n-se:%0A   \n+f.battery -= 1%0A\n         \n  self.di\n@@ -780,25 +780,24 @@\n = 1%0A        \n- \n self.display\n@@ -809,104 +809,8 @@\n / b%0A\n-        %0A        # Gasta bateria mesmo se der erro de divis%C3%A3o por zero%0A        self.battery -= 1\n %0A%0Ade\n@@ -943,16 +943,17 @@\n t%5Bstr%5D =\n+ \n  line.sp\n@@ -955,18 +955,16 @@\n ne.split\n-()\n %0A%0A      \n@@ -1016,11 +1016,12 @@\n == %22\n-end\n+init\n %22:%0A \n@@ -1058,32 +1058,33 @@\n command == %22init\n+:\n %22:%0A            b\n@@ -1349,16 +1349,35 @@\n charge%22:\n+ # charge increment\n %0A       \n@@ -1583,16 +1583,26 @@\n = %22sum%22:\n+ # sum a b\n %0A       \n@@ -1838,16 +1838,36 @@\n = %22div%22:\n+ # div den num (a b)\n %0A       \n",
            "lines": "77"
        },
        {
            "label": "2025-10-06_02-45-35",
            "content": "@@ -988,71 +988,88 @@\n     \n-self.battery -= 1%0A%0A# SUA FUN%C3%87%C3%83O MAIN ORIGINAL, SEM A CORRE%C3%87%C3%83O 3\n+# Gasta bateria mesmo se der erro de divis%C3%A3o por zero%0A        self.battery -= 1%0A\n %0Adef\n@@ -1201,17 +1201,16 @@\n t%5Bstr%5D =\n- \n  line.sp\n@@ -1212,16 +1212,18 @@\n ne.split\n+()\n %0A%0A      \n@@ -1271,20 +1271,19 @@\n and == %22\n-init\n+end\n %22:%0A     \n@@ -1324,17 +1324,16 @@\n == %22init\n-:\n %22:%0A     \n@@ -1610,27 +1610,8 @@\n ge%22:\n- # charge increment\n %0A   \n@@ -1825,18 +1825,8 @@\n um%22:\n- # sum a b\n %0A   \n@@ -2070,28 +2070,8 @@\n iv%22:\n- # div den num (a b)\n %0A   \n",
            "lines": "83"
        },
        {
            "label": "2025-10-06_02-47-23",
            "content": "@@ -1003,16 +1003,61 @@\n y -= 1%0A%0A\n+# SUA FUN%C3%87%C3%83O MAIN ORIGINAL, SEM A CORRE%C3%87%C3%83O 3%0A\n def main\n@@ -1590,16 +1590,35 @@\n charge%22:\n+ # charge increment\n %0A       \n@@ -1824,16 +1824,26 @@\n = %22sum%22:\n+ # sum a b\n %0A       \n@@ -2041,32 +2041,32 @@\n  inicializada%22)%0A\n-\n         elif com\n@@ -2079,16 +2079,36 @@\n = %22div%22:\n+ # div den num (a b)\n %0A       \n",
            "lines": "83"
        },
        {
            "label": "2025-10-06_02-48-37",
            "content": "@@ -1151,18 +1151,16 @@\n ne.split\n-()\n %0A%0A      \n",
            "lines": "82"
        },
        {
            "label": "2025-10-06_02-48-57",
            "content": "@@ -1214,11 +1214,12 @@\n == %22\n-end\n+init\n %22:%0A \n@@ -1256,32 +1256,33 @@\n command == %22init\n+:\n %22:%0A            b\n@@ -1359,21 +1359,8 @@\n ax)%0A\n-            %0A\n     \n",
            "lines": "82"
        },
        {
            "label": "2025-10-06_02-49-48",
            "content": "class Calculator:\n    def __init__(self, batteryMax: int):\n        self.display: float = 0.00\n        self.battery: int = 0\n        self.batteryMax: int = batteryMax\n\n    def __str__(self) -> str:\n        return f\"display = {self.display:.2f}, battery = {self.battery}\"\n    \n    def charge(self, increment: int):\n        self.battery += increment\n        if self.battery > self.batteryMax:\n            self.battery = self.batteryMax\n    \n    def _has_battery(self) -> bool:\n        if self.battery == 0:\n            print(\"fail: bateria insuficiente\")\n            return False\n        return True\n    \n    def sum(self, a: float, b: float):\n        if not self._has_battery():\n            return\n        \n        self.battery -= 1\n        self.display = a + b\n\n    def div(self, a: float, b: float):\n        if not self._has_battery():\n            return\n        \n        if b == 0:\n            print(\"fail: divisao por zero\")\n        else:\n            self.display = a / b\n        \n        self.battery -= 1\n\ndef main():\n    calc: Calculator = None\n\n    while True:\n        line: str = input()\n        print(\"$\" + line)\n        args: list[str] =  line.split()\n\n        command: str = args[0]\n\n        if command == \"end\":\n            break\n        elif command == \"init\":\n            battery_max: int = int(args[1])\n            calc = Calculator(battery_max)\n            \n        elif command == \"show\":\n            if calc:\n                print(calc)\n            else:\n                print(\"fail: calculadora n\u00e3o inicializada\")\n        elif command == \"charge\":\n            if calc:\n                increment: int = int(args[1])\n                calc.charge(increment)\n            else:\n                print(\"fail: calculadora n\u00e3o inicializada\")\n        elif command == \"sum\":\n            if calc:\n                a: float = float(args[1])\n                b: float = float(args[2])\n                calc.sum(a, b)\n            else:\n                print(\"fail: calculadora n\u00e3o inicializada\")\n        elif command == \"div\":\n            if calc:\n                a: float = float(args[1])\n                b: float = float(args[2])\n                calc.div(a, b)\n            else:\n                print(\"fail: calculadora n\u00e3o inicializada\")\n        else:\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain()",
            "lines": "83"
        }
    ]
}