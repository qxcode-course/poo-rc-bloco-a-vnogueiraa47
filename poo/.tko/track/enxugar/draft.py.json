{
    "patches": [
        {
            "label": "2025-09-23_14-24-57",
            "content": "@@ -1303,101 +1303,11 @@\n == %22\n-seca%22:%0A            print(%22sim%22 if towel.isDry() else %22n%C3%A3o%22 )%0A        elif args%5B0%5D == %22enxugar\n+dry\n %22:%0A \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-27-34",
            "content": "@@ -1493,15 +1493,12 @@\n == %22\n-mostrar\n+show\n %22:%0A \n",
            "lines": "52"
        },
        {
            "label": "2025-10-05_21-33-07",
            "content": "@@ -52,16 +52,29 @@\n e: str):\n+ # construtor\n %0A       \n@@ -98,16 +98,27 @@\n = color \n+# atributos\n %0A       \n@@ -512,16 +512,31 @@\n  == %22P%22:\n+ # early return\n %0A       \n@@ -668,16 +668,33 @@\n return 0\n+ # default return\n %0A%0A    de\n@@ -717,16 +717,26 @@\n -%3E str: \n+# toString\n %0A       \n@@ -749,17 +749,16 @@\n n f%22Cor:\n- \n %7Bself.co\n@@ -771,17 +771,16 @@\n Tamanho:\n- \n %7Bself.si\n@@ -792,17 +792,16 @@\n Umidade:\n- \n %7Bself.we\n@@ -859,24 +859,81 @@\n %22%22) \n-%0A    while True:\n+# 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito\n %0A%0A  \n@@ -958,16 +958,41 @@\n input() \n+# 4: perguntar ao usuario\n %0A       \n@@ -1052,16 +1052,39 @@\n it(%22 %22) \n+# 5: separar argumentos\n %0A%0A      \n",
            "lines": "52"
        },
        {
            "label": "2025-10-05_21-35-58",
            "content": "@@ -427,62 +427,8 @@\n  = 0\n-%0A    def isDry(self):%0A        return self.wetness == 0\n %0A%0A  \n",
            "lines": "52"
        },
        {
            "label": "2025-10-05_21-42-50",
            "content": "@@ -1240,17 +1240,17 @@\n  else %22n\n-a\n+%C3%A3\n o%22 )%0A   \n",
            "lines": "54"
        },
        {
            "label": "2025-10-05_21-43-16",
            "content": "@@ -347,18 +347,36 @@\n lha \n-encharcada\n+saturada, ensopada, pingando\n %22)%0A%0A\n@@ -1491,9 +1491,19 @@\n %0A%0Amain()\n+ # passo 1\n %0A\n",
            "lines": "54"
        },
        {
            "label": "2025-10-05_21-45-04",
            "content": "@@ -1406,72 +1406,21 @@\n   el\n-if args%5B0%5D == %22torcer%22:%0A            towel.wringOut%0A        else:\n+se: # 7: erro\n %0A   \n",
            "lines": "54"
        },
        {
            "label": "2025-10-05_21-47-27",
            "content": "@@ -1452,18 +1452,16 @@\n wringOut\n-()\n %0A       \n",
            "lines": "56"
        },
        {
            "label": "2025-10-05_21-51-32",
            "content": "class Towel:\n    def __init__(self, color: str, size: str):\n        self.color: str = color \n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def wringOut(self):\n        self.wetness = 0\n    def isDry(self):\n        return self.wetness == 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def __str__(self) -> str: \n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") \n    while True:\n\n        line: str = input() \n        print(\"$\" + line)\n        args: list[str] = line.split(\" \") \n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\" )\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        else:\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain()\n",
            "lines": "56"
        }
    ]
}